<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell on Colored Hedwig</title>
    <link>http://simonpatrick.github.io/categories/shell/</link>
    <description>Recent content in Shell on Colored Hedwig</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 05 Nov 2015 18:31:42 +0000</lastBuildDate>
    <atom:link href="http://simonpatrick.github.io/categories/shell/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>shell来自动生成Jekyll post文件</title>
      <link>http://simonpatrick.github.io/posts/shell/2015-11-05-generate-jekyll-post-file/</link>
      <pubDate>Thu, 05 Nov 2015 18:31:42 +0000</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2015-11-05-generate-jekyll-post-file/</guid>
      <description>

&lt;p&gt;通过以下代码可以生成jekyll 的post 文件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#! /bin/bash

CAT=$1
TITLE=$2
echo &amp;quot;current location: $PWD&amp;quot;
echo &amp;quot;category: $CAT&amp;quot;
echo &amp;quot;file_name: $TITLE&amp;quot;

FilePrefix=`date &amp;quot;+%Y-%m-%d-&amp;quot;`
FILE_NAME=&amp;quot;$FilePrefix$TITLE.md&amp;quot;
echo &amp;quot;target file name is $FILE_NAME&amp;quot;
echo &amp;quot;generate file.......&amp;quot;

POST_LOCATION=_posts/$CAT
FILE_LOCATION=$POST_LOCATION/$FILE_NAME
if [ -d $POST_LOCATION ]
then
    cp template.md $FILE_LOCATION
else
    echo &amp;quot;create folder $CAT&amp;quot;
    mkdir -p $POST_LOCATION
    cp template.md $FILE_LOCATION
fi

cd $POST_LOCATION
echo &amp;quot;current location: $PWD&amp;quot;
TODAY=`date &amp;quot;+%Y-%m-%d-%H:%M:%S&amp;quot;`
echo &amp;quot;today:$TODAY&amp;quot;
# replace keyword in template
sed -i &#39;&#39; &amp;quot;s/_TITLE/$TITLE/g&amp;quot; $FILE_NAME
sed -i &#39;&#39; &amp;quot;s/_CAT/$CAT/g&amp;quot; $FILE_NAME
sed -i &#39;&#39; &amp;quot;s/_TAG/$CAT/g&amp;quot; $FILE_NAME
sed -i &#39;&#39; &amp;quot;s/_DATE/$TODAY/g&amp;quot; $FILE_NAME

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上脚本中使用到了shell中的如下命令：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;date 获取时间&lt;/li&gt;
&lt;li&gt;sed 替换文本内容&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;shell-date-使用:4200e08297d86900208ecc487dad1ab4&#34;&gt;shell - date 使用&lt;/h2&gt;

&lt;p&gt;格式化date 可以使用如下方法：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  date &amp;quot;+%Y-%m-%d-%H:%M:%S&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;后面是date 的格式，通过&lt;code&gt;man date&lt;/code&gt;可以查找更详细的格式&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;将shell的返回值再赋值:4200e08297d86900208ecc487dad1ab4&#34;&gt;将shell的返回值再赋值&lt;/h2&gt;

&lt;p&gt;以上实例中使用了:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;TODAY=`date &amp;quot;+%Y-%m-%d-%H:%M:%S&amp;quot;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将shell的返回值再赋值,&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  ``
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在shell中是用来将返回值赋值&lt;/p&gt;

&lt;h2 id=&#34;使用sed-替换文本:4200e08297d86900208ecc487dad1ab4&#34;&gt;使用sed 替换文本&lt;/h2&gt;

&lt;p&gt;以下是MAC中sed的用法，－i后面额外多了‘’参数&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sed -i &#39;&#39; &amp;quot;s/_TITLE/$TITLE/g&amp;quot; $FILE_NAME
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解释&lt;code&gt;s/_TITLE/$TITLE/g&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;s: replace&lt;/li&gt;
&lt;li&gt;_TITLE: 旧值&lt;/li&gt;
&lt;li&gt;$TITLE: 新值&lt;/li&gt;
&lt;li&gt;g: 全部替换(global)&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shell Script for updating all git repo</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-10-24-shell_for_update_all_git_repo/</link>
      <pubDate>Fri, 24 Oct 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-10-24-shell_for_update_all_git_repo/</guid>
      <description>

&lt;h1 id=&#34;更新一个目录下所有的git-repository的shell-脚本:32b0c9096e32efb60342d4fa2a014726&#34;&gt;更新一个目录下所有的git repository的shell 脚本&lt;/h1&gt;

&lt;p&gt;最近感觉需要了解一些shell脚本的使用，刚好本地上面的一个文件夹中有一些github上面的代码仓库，所以刚好学着用shell来更新各个代码仓库&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#! /bin/bash

for file in ./*
do
  if test -d $file
  then  
    echo $file is directory 
    cd $file
    a=$(pwd)
    echo $a
    git pull
    cd ..
    b=$(pwd)
    echo $b
  fi

done

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - Concept</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_concept/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_concept/</guid>
      <description>

&lt;p&gt;摘自：&lt;a href=&#34;http://wklken.me/posts/2014/01/12/shell-script-base.html&#34;&gt;http://wklken.me/posts/2014/01/12/shell-script-base.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;标准io:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;标准IO&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;文件描述符
0 标准输入 默认键盘
1 标准输出 默认终端
2 标准错误 默认终端
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;重定向:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;重定向&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; 输出重定向
&amp;gt;&amp;gt; 追加到输出重定向
&amp;lt; 输入重定向
&amp;lt;&amp;lt; 追加到输入重定向

ls -l &amp;gt; /tmp/a

cmd &amp;gt;/dev/null #输出到垃圾桶
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dev是设备(device)的英文缩写。/dev这个目录对所有的用户都十分重要。因为在这个目录中包含了所有Linux系统中使用的外部设备。但是这里并不是放的外部设备的驱动程序，这一点和windows,dos操作系统不一样。它实际上是一个访问这些外部设备的端口。我们可以非常方便地去访问这些外部设备，和访问一个文件，一个目录没有任何区别。&lt;/p&gt;

&lt;p&gt;/dev/null 它是空设备，也称为位桶（bit bucket）或者黑洞(black hole)。你可以向它输入任何数据，但任何写入它的数据都会被抛弃。通常用于处理不需要的输出流。（当然，它也可以作为空的输入流&lt;/p&gt;

&lt;p&gt;dev/zero 该设备无穷尽地提供空字符（ASCII NUL, 0x00），可以使用任何你需要的数目。它通常用于向设备或文件写入字符串0，用于初始化数据存储。（当然，也可作为输出流的接受容器）&lt;/p&gt;

&lt;h3 id=&#34;管道:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;管道&lt;/h3&gt;

&lt;p&gt;前后连接两个命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ls -l | grep test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;引号:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;引号&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;双引号：可以除了字符$`\外地任何字符或字符串
单引号：忽略任何引用值，将引号里的所有字符作为一个字符串 $var 不能被解析
反引号：设置系统命令输出到变量
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;命令执行:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;命令执行&lt;/h3&gt;

&lt;p&gt;shell脚本识别三种基本命令：内建命令，shell函数和外部命令&lt;/p&gt;

&lt;p&gt;基本的命令查找:shell会沿着查找路径$PATH来寻找命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以在.profile文件中修改&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=$PATH:$HOME/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and/or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;expression1 &amp;amp;&amp;amp; expression2 &amp;amp;&amp;amp; expression3
只有前面一条命令执行成功，才执行下一条
expression1执行成功，才执行expression2
串联的

expression1 || expression2 || expression3
执行命令，直到有一条成功为止
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;linux运维常用工具:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;Linux运维常用工具&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Cobbler&lt;/li&gt;
&lt;li&gt;sshd&lt;/li&gt;
&lt;li&gt;iptables&lt;/li&gt;
&lt;li&gt;sysctl&lt;/li&gt;
&lt;li&gt;puppet agent&lt;/li&gt;
&lt;li&gt;limits&lt;/li&gt;
&lt;li&gt;ntp&lt;/li&gt;
&lt;li&gt;Ganglia&lt;/li&gt;
&lt;li&gt;Cacti&lt;/li&gt;
&lt;li&gt;Nagios&lt;/li&gt;
&lt;li&gt;Zabbix&lt;/li&gt;
&lt;li&gt;PlayBanch Watch&lt;/li&gt;
&lt;li&gt;Scribe Hadoop&lt;/li&gt;
&lt;li&gt;ScatterQ&lt;/li&gt;
&lt;li&gt;Yum Repository&lt;/li&gt;
&lt;li&gt;package&lt;/li&gt;
&lt;li&gt;Configuration/Change/Service/Custom&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;puppet中服务配置:660c0f04cb50331e4a1707eb2ca2c087&#34;&gt;Puppet中服务配置&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Systemg&lt;/li&gt;
&lt;li&gt;sshd&lt;/li&gt;
&lt;li&gt;iptables&lt;/li&gt;
&lt;li&gt;sysctrl&lt;/li&gt;
&lt;li&gt;ntp&lt;/li&gt;
&lt;li&gt;nginx&lt;/li&gt;
&lt;li&gt;zabbix&lt;/li&gt;
&lt;li&gt;scribe&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - Control Flow</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_controll_flow/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_controll_flow/</guid>
      <description>

&lt;h3 id=&#34;if-test-条件测试:2b34d266afd82afc53ba1ec8f2a49b9d&#34;&gt;if/test 条件测试&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

a=34
if test $a = 4
then
  echo true
else
  echo false
fi

if [ $a -eq 34 ]
then
  echo true
else
  echo false
fi

#Result:
h controll_flow.sh
false
true
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - Scripting</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_scripting/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_scripting/</guid>
      <description>

&lt;h2 id=&#34;shell-script-sample:842d02cf17573b1352f14cbf3620f379&#34;&gt;Shell Script sample&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    #!/bin/bash
    # do somthing
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;run-shell-script:842d02cf17573b1352f14cbf3620f379&#34;&gt;Run Shell Script&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh script.sh
chmod a+x script.sh
./script.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cmd1;cmd2
# or
cmd1
cmd2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;echo:842d02cf17573b1352f14cbf3620f379&#34;&gt;echo&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;welcome to bash&amp;quot;
ehco welcome to bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不对单引号求值：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;╰─[:)] % echo &#39;$test&#39;
$test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;换行：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;╰─[:)] % echo &amp;quot;test\ntest&amp;quot;
test
test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打印颜色：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;文字颜色码
    重置0
    黑色30
    红色31
    绿色32
    黄色33
    蓝色34
    洋红35
    青色36
    白色37

echo -e &amp;quot;\e[1;31m This is red test \e[0m&amp;quot;

背景颜色码
    重置0
    黑色40
    红色41
    绿色42
    黄色43
    蓝色44
    洋红45
    青色46
    白色47

echo -e &amp;quot;\e[1;42m Green Background \e[0m&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;printf:842d02cf17573b1352f14cbf3620f379&#34;&gt;printf&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;printf &amp;quot;hello world&amp;quot;
printf &amp;quot;%-5s %-10s %-4.2f\n&amp;quot; 3 Jeff 77.564
3     Jeff       77.56
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - Variant 变量</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_variant/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_variant/</guid>
      <description>

&lt;p&gt;摘自：&lt;a href=&#34;http://wklken.me/posts/2014/01/12/shell-script-base.html&#34;&gt;http://wklken.me/posts/2014/01/12/shell-script-base.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;变量赋值:b60343f630dba1c87312f8909ccd41ac&#34;&gt;变量赋值&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
var=value
echo $var
var=&#39;the value&#39;
echo $var
var=&amp;quot;the $PARAM&amp;quot;
echo $var
echo $var
echo `pwd`
echo $(pwd)

#result:
╰─[:)] % sh shell_variant.sh
value
the value
the
the
/Users/patrick/workspace/works/shell_learning
/Users/patrick/workspace/works/shell_learning
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;变量分类:b60343f630dba1c87312f8909ccd41ac&#34;&gt;变量分类&lt;/h3&gt;

&lt;p&gt;四种变量：环境变量、本地变量、位置变量、特定变量参数&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* 环境变量可作用于所有子进程
* 本地变量在用户现在的shell 生命期的脚本中使用，仅存在于当前进程
* 位置变量：作为程序参数
* 特定变量：特殊作用
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;环境变量:b60343f630dba1c87312f8909ccd41ac&#34;&gt;环境变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    设置
    MYVAR=&amp;quot;test&amp;quot;
    expirt MYVAR
    or
    export MYVAR=&amp;quot;test&amp;quot;

    只读
    MYVAR=&amp;quot;test&amp;quot;
    readonly MYVAR
    or
    readonly MYVAR=&amp;quot;test&amp;quot;

    显示
    export -p
    env #查看所有环境变量
    $MYVAR #获取

    消除
    unset MYVAR
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;本地变量:b60343f630dba1c87312f8909ccd41ac&#34;&gt;本地变量&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;设置
LOCAL_VAR=&amp;quot;test&amp;quot;
or
LOCAL_VAR=&amp;quot;test&amp;quot;
readonly LOCAL_VAR #设置只读

还可以使用declare命令定义
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;位置变量:b60343f630dba1c87312f8909ccd41ac&#34;&gt;位置变量&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;$0 脚本名称&lt;/li&gt;
&lt;li&gt;$# 传递到脚本参数个数&lt;/li&gt;
&lt;li&gt;$$ shell脚本运行当前进程ID&lt;/li&gt;
&lt;li&gt;$? 退出状态&lt;/li&gt;
&lt;li&gt;$N N&amp;gt;=1，第n个参数&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo $#
echo $0
echo $1 $2
echo $$

# result:
2
read_parameter.sh
1 2
24171
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字符串处理:b60343f630dba1c87312f8909ccd41ac&#34;&gt;字符串处理&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;${#VARIABLE_NAME}&lt;/code&gt; 可以给出字符串的长度&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
echo $#
echo $0
echo $1 $2
echo $$

p=$2
echo $p

if [ ${#p} != 2 ]
then
  echo &amp;quot;wrong input&amp;quot;
fi

# Result

h read_parameter.sh 1 2
2
read_parameter.sh
1 2
24217
2
wrong input
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;拼接字符串:b60343f630dba1c87312f8909ccd41ac&#34;&gt;拼接字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;$x$y&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字符串切片:b60343f630dba1c87312f8909ccd41ac&#34;&gt;字符串切片&lt;/h3&gt;

&lt;p&gt;${变量名:起始:长度}得到子字符串&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ test=&#39;I love china&#39;
$ echo ${test:5}
e china
$ echo ${test:5:10}
e china

str=&amp;quot;hello world&amp;quot;
echo ${str:6}  # ${var:offset:length}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;字符串替换:b60343f630dba1c87312f8909ccd41ac&#34;&gt;字符串替换&lt;/h3&gt;

&lt;p&gt;${变量/查找/替换值}&lt;/p&gt;

&lt;p&gt;一个“/”表示替换第一个，”//”表示替换所有,当查找中出现了：”/”请加转义符”\/”表示&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo ${str/foo/bar} #首个
echo ${str//foo/bar} #所有
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;正则匹配:b60343f630dba1c87312f8909ccd41ac&#34;&gt;正则匹配&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;if [[ $str =~ [0-9]+\.[0-9]+ ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;数值处理:b60343f630dba1c87312f8909ccd41ac&#34;&gt;数值处理&lt;/h3&gt;

&lt;p&gt;自增&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;a=1
a=`expr a + 1`

or

a=1
let a++
let a+=2
let

no1=4
no2=5
let result=no1+no2
expr

result=`expr 3 + 4`
result=$(expr $no1 + 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;其他:b60343f630dba1c87312f8909ccd41ac&#34;&gt;其他&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;result=$[ no1 + no2 ]
result=$[ $no + 5 ]

result=$(( no1 + 5 ))
浮点数

echo &amp;quot;4 * 0.56&amp;quot; | bc
设定精度
echo &amp;quot;scale=2;3/8&amp;quot; | bc
进制转换
echo &amp;quot;obase=2;100&amp;quot; | bc
平方
echo &amp;quot;sqrt(100)&amp;quot; | bc
数组和map
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - 操作符号</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_operator/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_operator/</guid>
      <description>

&lt;p&gt;摘自：&lt;a href=&#34;http://wklken.me/posts/2014/01/12/shell-script-base.html&#34;&gt;http://wklken.me/posts/2014/01/12/shell-script-base.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;计算:ca7f7957b434522cd9922b2a6fc92be5&#34;&gt;计算&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
no_1=4
no_2=5
let result=no_1+no_2

let result--
echo $result
let result++
echo $result

# expr(漏洞之源？？)

result=`expr 3+4`
echo $result
result=`expr $no_1+345`
echo $result
result=$[ no_1 + no_2 ]
echo $result
result=$[ $no_1 + 5 ]

echo $result
result=$(( no_1 + 5 ))
echo $result

# result:
8
9
3+4
4+345
9
9
9
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Shell Learning - 环境变量</title>
      <link>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_env/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/shell/2014-08-24-shell_101_env/</guid>
      <description>

&lt;p&gt;摘自：&lt;a href=&#34;http://wklken.me/posts/2014/01/12/shell-script-base.html&#34;&gt;http://wklken.me/posts/2014/01/12/shell-script-base.html&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;env:5118a2520658b935ae3db3d2ded4e5aa&#34;&gt;env&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    env |grep keyword
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;修改环境变量:5118a2520658b935ae3db3d2ded4e5aa&#34;&gt;修改环境变量&lt;/h3&gt;

&lt;p&gt;未在当前进程中定义，而是从父进程中继承而来的变量
export 设置环境变量,之后,从当前shell 执行的任何程序都会继承这个变量&lt;/p&gt;

&lt;p&gt;PATH 查找可执行文件路径, 通常定义在/etc/environment or /ect/profile or ~/.bashrc&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    export PYTHONPATH=$PYTHONPATH:/home/ken/workspace
     export PATH=$PATH:/new/path/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常用的环境变量名：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash

echo $HOME
echo $PWD
echo $USER
echo $UID
echo $SHELL

#Result
╰─[:)] % sh env_variant.sh
/Users/patrick
/Users/patrick/workspace/works/shell_learning
patrick
501
/bin/zsh
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;检查是否是root:5118a2520658b935ae3db3d2ded4e5aa&#34;&gt;检查是否是root&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
# root的UID=0

if [ $UID -ne 0 ]
then
    echo &amp;quot;not root user&amp;quot;
else
    echo &amp;quot;root&amp;quot;
fi

#result:
╰─[:)] % sh is_root.sh
not root user
╭─[~/workspace/works/shell_learning]─[patrick@patrickdeMacBook-Pro]─[0]─[10192]
╰─[:)] % su root
Password:
sh-3.2# sh is_root.sh
yes I am root
sh-3.2#
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>