<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts on Colored Hedwig</title>
    <link>http://simonpatrick.github.io/tags/thoughts/</link>
    <description>Recent content in Thoughts on Colored Hedwig</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Jan 2016 17:42:38 +0000</lastBuildDate>
    <atom:link href="http://simonpatrick.github.io/tags/thoughts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2016-looking-forword</title>
      <link>http://simonpatrick.github.io/posts/thoughts/2016-01-01-2016-looking-forword/</link>
      <pubDate>Fri, 01 Jan 2016 17:42:38 +0000</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/thoughts/2016-01-01-2016-looking-forword/</guid>
      <description>&lt;p&gt;2015 就这样过去了，回顾这一年说说其实也是平平谈谈，主要几件事情是：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;前前后后拒绝了5个offer，有BAT的，有创业公司的，有很好的Offer，无论如何在目前这家公司干了快1年&lt;/li&gt;
&lt;li&gt;做了一个自动化框架，包括了UI，接口，給公司的人做了无数的培训，运用到了数个项目中&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2016 年要做什么呢？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;持续改进框架，开源并产品化&lt;/li&gt;
&lt;li&gt;集成性能测试,安全测试&lt;/li&gt;
&lt;li&gt;移动测试&lt;/li&gt;
&lt;li&gt;DevOps工具&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>下一步的技术了解</title>
      <link>http://simonpatrick.github.io/posts/thoughts/2015-12-28-next-reading/</link>
      <pubDate>Mon, 28 Dec 2015 19:49:29 +0000</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/thoughts/2015-12-28-next-reading/</guid>
      <description>

&lt;p&gt;Thoughtworks 发布了2015年技术雷达，看看他提到的东西可以长长见识。&lt;/p&gt;

&lt;h2 id=&#34;技术篇:fd3b9bd9161b8301aa20362720c11b7b&#34;&gt;技术篇&lt;/h2&gt;

&lt;p&gt;这里提到了几篇Martin Flower的文章，抽时间一定要看看。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.martinfowler.com/bliki/TestDouble.html&#34;&gt;Test Double&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/articles/nonDeterminism.html&#34;&gt;nonDeterminism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://martinfowler.com/microservices/&#34;&gt;microservice&lt;/a&gt;
基本上他写的文章确实有必要看看的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;安全:fd3b9bd9161b8301aa20362720c11b7b&#34;&gt;安全&lt;/h2&gt;

&lt;p&gt;－&lt;a href=&#34;owasp.org/index.php/category:Thread_modeling&#34;&gt;Thread Modeling&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;工具-语言-观念:fd3b9bd9161b8301aa20362720c11b7b&#34;&gt;工具,语言，观念&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;graphiz.org&#34;&gt;graphiz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;hoodie.ie&#34;&gt;hoodie&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;couchdb.apache.org&#34;&gt;couchdb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;facebook.github.io/flux&#34;&gt;Flux&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;git as cms&lt;/li&gt;
&lt;li&gt;phoneix server&lt;/li&gt;
&lt;li&gt;functional reactive programing （FRP）&lt;/li&gt;
&lt;li&gt;Spark&lt;/li&gt;
&lt;li&gt;kylin.io&lt;/li&gt;
&lt;li&gt;TOTP 密码机制，two－factor authentication&lt;/li&gt;
&lt;li&gt;Deis.io&lt;/li&gt;
&lt;li&gt;H2O&lt;/li&gt;
&lt;li&gt;TSDB,OpenTSB,influxDB,Cassandra&lt;/li&gt;
&lt;li&gt;SPDY&lt;/li&gt;
&lt;li&gt;mountebank&lt;/li&gt;
&lt;li&gt;polly/brighter&lt;/li&gt;
&lt;li&gt;consul.io/DNS+HTTP,consulTemplate&lt;/li&gt;
&lt;li&gt;Hamms&lt;/li&gt;
&lt;li&gt;Rest-assured&lt;/li&gt;
&lt;li&gt;ZAP&lt;/li&gt;
&lt;li&gt;Kafka&lt;/li&gt;
&lt;li&gt;Blackbox&lt;/li&gt;
&lt;li&gt;Bokeh data visualization&lt;/li&gt;
&lt;li&gt;Vega /D3.js&lt;/li&gt;
&lt;li&gt;Gor&lt;/li&gt;
&lt;li&gt;NaCI&lt;/li&gt;
&lt;li&gt;Orgami&lt;/li&gt;
&lt;li&gt;PdfMaker&lt;/li&gt;
&lt;li&gt;SoundCloud&lt;/li&gt;
&lt;li&gt;Quick object C/swift&lt;/li&gt;
&lt;li&gt;security monkey&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>测试用例-一些有意思的工具</title>
      <link>http://simonpatrick.github.io/posts/thoughts/2015-11-03-Test-Tools/</link>
      <pubDate>Wed, 04 Nov 2015 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/thoughts/2015-11-03-Test-Tools/</guid>
      <description>

&lt;h2 id=&#34;automation-test-case-generate-tools:b5821be488246679c2205cacd3be8aff&#34;&gt;Automation Test Case Generate Tools&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://korat.sourceforge.net/&#34;&gt;Korat(structurally complex tests)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/randoop/randoop&#34;&gt;Randoop (random testing)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/CERTCC-Vulnerability-Analysis/certfuzz&#34;&gt;CERT Basic Fuzzing Framework&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/samhocevar/zzuf.git&#34;&gt;ZZUF&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cert.org/vulnerability-analysis/tools/triage.cfm?&#34;&gt;cert.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/osate&#34;&gt;osate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://mit.bme.hu/~micskeiz/pages/code_based_test_generation.html&#34;&gt;link&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>测试用例设计- 随机指定一个产品的测试</title>
      <link>http://simonpatrick.github.io/posts/thoughts/2015-10-22-Random-TestCaseDesign/</link>
      <pubDate>Thu, 22 Oct 2015 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/thoughts/2015-10-22-Random-TestCaseDesign/</guid>
      <description>

&lt;p&gt;有时面试的时候会随机指定一个产品进行测试,比如一个电梯,你会如何设计测试用例？这个问题很发散,更多的是看应聘者的条理
和分析能力.&lt;/p&gt;

&lt;p&gt;本质上一个电梯是一个太大的范畴，实际测试的过程中很少一下子会有这么巨大的功能让你测试的。
与其说让你设计测试用例，其实好不如说让你想一个电梯有什么功能,然后根据功能再来考虑测试用例,所以更多的
是考察思路,在实际的测试工作中,如果突然有个人说我今天完成了一个电梯的功能,找个人给我测一下吧。
那么多半这个项目就是个让测试欲哭无泪的项目。&lt;/p&gt;

&lt;p&gt;不过既然面试有人问这样的问题，那么就分析分析吧，以下我是把电梯转化为类似互联网产品来做的分析，
完全是个人想法,一定有非常多欠缺。&lt;/p&gt;

&lt;h2 id=&#34;后端服务组件和客户端分离-client-server-mvc:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;后端服务组件和客户端分离(Client-Server/MVC)&lt;/h2&gt;

&lt;p&gt;首先其实对把一个电梯分成不同的组件：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;驱动服务: 可以使电梯上下行(后台服务)&lt;/li&gt;
&lt;li&gt;门: 开门关门(后台服务)&lt;/li&gt;
&lt;li&gt;电梯操作面板: 人机界面,担当用户和电梯的一个中间人作用,将用户操作转化为指令来控制电梯 (app/web page)
(如果简单的话可能操作命令转换就都在这个地方了，如果复杂可能还有一个控制系统层)&lt;/li&gt;
&lt;li&gt;指令控制系统(调度系统,监听器或者Queue)&lt;/li&gt;
&lt;li&gt;呼叫监控系统:(可以暂时不考虑)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里就先考虑简单的情况，电梯操作面板模块之内将操作转换成指令给电梯的驱动和门服务&lt;/p&gt;

&lt;h2 id=&#34;逐个组件来考虑用例:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;逐个组件来考虑用例&lt;/h2&gt;

&lt;h3 id=&#34;驱动服务可能包含的功能点有如下:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;驱动服务可能包含的功能点有如下:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;上行, 但是上行有极限位置(可配置)，按照指定步进数量上行&lt;/li&gt;
&lt;li&gt;中途等待&lt;/li&gt;
&lt;li&gt;步进距离(一层距离)可以配置&lt;/li&gt;
&lt;li&gt;下行,下行位置(可配置)，按照指定步进数量下行&lt;/li&gt;
&lt;li&gt;承载重量&lt;/li&gt;
&lt;li&gt;可靠性监测，使用寿命监测&lt;/li&gt;
&lt;li&gt;故障监测&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里注意如果测试电梯产品和测试指定某个大楼的电梯,测试用例的设计考虑点是稍有不同的，如果是电梯产品他就有电梯的配置项需要测试，
如果是测试制定电梯,那么配置项就可以忽略了，配置的就是你目前的配置。&lt;/p&gt;

&lt;h3 id=&#34;门服务:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;门服务&lt;/h3&gt;

&lt;p&gt;关于门的服务可能会想到的是:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;开门&lt;/li&gt;
&lt;li&gt;关门&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于开门这个功能的测试用例测试可以围绕:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接收到开门指令开门并且只做开门&lt;/li&gt;
&lt;li&gt;在电梯运动过程中接收到开门指令不开门&lt;/li&gt;
&lt;li&gt;接收不到开门指令则不开门&lt;/li&gt;
&lt;li&gt;开门指令被中断&lt;/li&gt;
&lt;li&gt;开门接到后的进行开门的响应时间&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关门是类似，但是关门需要考虑超重情况下不能关门.
可靠性考虑多少次开门关门之后开门关门的机械组件才失效&lt;/p&gt;

&lt;h3 id=&#34;电梯操作面板:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;电梯操作面板&lt;/h3&gt;

&lt;p&gt;操作面板这块实际上分为界面控件状态改变和指令转换两大块,在通过操作操作面板按钮后，同时
改变按钮状态以及发送正确指令,而指令处理这块就可
- 门开关按钮, 开关有效,开关无效
- 楼层按钮，启用,取消，灯亮，灯关
- 电梯上下调度, 多个按钮被按下之后,结合电梯自己所在位置决定运行方案
- 易用性等，因为是见人的地方，所有就有usability 测试&lt;/p&gt;

&lt;h3 id=&#34;指令控制系统:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;指令控制系统&lt;/h3&gt;

&lt;p&gt;指令控制系统可以认为根据电梯运行时的上下文,调度电梯运行的一个模块,这里面应该是根据某种规则
发出实际控制电梯的信号，具体什么的规则其实很难断定。&lt;/p&gt;

&lt;h3 id=&#34;扩展到多个电梯的调度测试:2d7d5581ce090c319d7e70f8706405e8&#34;&gt;扩展到多个电梯的调度测试&lt;/h3&gt;

&lt;p&gt;有可能会有多个电梯的调度，同样也是需要一套规则再来进行测试的&lt;/p&gt;

&lt;p&gt;这个文章写的有点粗糙,主要凭空去想这些case太伤脑袋，但是总体而言个人认为这是一个考虑问题的方向，同时个人觉得在一个短时间内
针对这样一个系统说写出很多测试用例，其实也就是呵呵了。
也许有更好的方法来总结这样的测试,可能类似于探索性测试之类的，希望有人能够指正。
同时我们也可以看到设计测试用例要包含多少东西,测试需要了解:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;产品需求(没有需要推测:))&lt;/li&gt;
&lt;li&gt;功能&lt;/li&gt;
&lt;li&gt;可靠性&lt;/li&gt;
&lt;li&gt;性能&lt;/li&gt;
&lt;li&gt;扩展性&lt;/li&gt;
&lt;li&gt;可用性&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;从high level看可能还有更多,这些一个人都可以搞定的话,这个人还是人吗?而在实际的工作中这些会有都
多少人都进行相关类型的测试？不说进行这样的测试，估计连衡量这些测试的优先级都不会,有人说的头头
是道，可是真的有多少实践呢？&lt;/p&gt;

&lt;p&gt;生活可能就是这样的,说的天花乱坠的,可能其实都是别人的经验,如果真的自己动手做的时候,就说需要找人做.
然后他就成为领导了.也有更大的领导在说一个什么事情的时候，就接入一个宏大的名词，然后大领导一听，对，
然后他也成了领导了. 而做事的人苦苦的寻觅着那些宏大名次的解答，更为关键的是,很可能是你一个人去寻找
很多宏大名词的解答.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>关于测试的一点想法</title>
      <link>http://simonpatrick.github.io/posts/thoughts/2013-09-24-thoughts_on_testing/</link>
      <pubDate>Tue, 24 Sep 2013 10:31:11 +0800</pubDate>
      
      <guid>http://simonpatrick.github.io/posts/thoughts/2013-09-24-thoughts_on_testing/</guid>
      <description>

&lt;h1 id=&#34;引子:75f37de82acf08172666c46773f32200&#34;&gt;引子&lt;/h1&gt;

&lt;p&gt;作为全职测试大概有8年时间了，总体来说整个这8年不是一个愉快的过程。其中辛苦可能没有做过测试的人未必能理解。对于一个职场人来说不够愉快的点个人认为大概可能是以下几点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;成就感不多&lt;/li&gt;
&lt;li&gt;个人技术积累不多&lt;/li&gt;
&lt;li&gt;可供选择的机会相对较少，转型难度大&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;问题分析:75f37de82acf08172666c46773f32200&#34;&gt;问题分析&lt;/h2&gt;

&lt;h3 id=&#34;1-成就感不多:75f37de82acf08172666c46773f32200&#34;&gt;1. 成就感不多&lt;/h3&gt;

&lt;h4 id=&#34;1-1-决定产品好坏的不是测试:75f37de82acf08172666c46773f32200&#34;&gt;1.1.决定产品好坏的不是测试&lt;/h4&gt;

&lt;p&gt;大体可以罗列一下一个好的产品的几个要素：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;解决了其他人没有解决的重要问题&lt;/li&gt;
&lt;li&gt;易用，好用&lt;/li&gt;
&lt;li&gt;扩展性好，定制能力强&lt;/li&gt;
&lt;li&gt;稳定，bug少&lt;/li&gt;
&lt;li&gt;性能出色&lt;/li&gt;
&lt;li&gt;交付快，成本低&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人认为以上几点中测试几乎都无法起到决定因素。测试人可能看到某些新的需求，但是很难从更高层面上来看待产品；可用性上面同样也是一样的问题，可以提出优化的点，但是可能只是点到为止了；扩展性，定制能力，基本上看架构设计和开发的质量；至于稳定，bug少，性能好这个也要看团队了，大体上个人认为还是开发权重高；&lt;code&gt;交付快，成本低，&lt;/code&gt;个人认为这块测试有一些权重，而且我认为测试需要投入更多的东西在这个层面&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-2-测试人缺少作品-在公司战略里面地位不突出:75f37de82acf08172666c46773f32200&#34;&gt;1.2. 测试人缺少作品，在公司战略里面地位不突出&lt;/h4&gt;

&lt;p&gt;作为软件行业研发部门的人来说，大体可以认为都是匠人，&lt;code&gt;匠人最重要的是什么？就是作品&lt;/code&gt;，那么软件测试人的作品是什么？貌似你做的产品和你关系不大，你几乎没有贡献一行代码；你提出了多少实现了的需求呢？貌似也不多吧，有人说有，那不错，但是站在更高层面上看，你的新需求只是一个点，产品是讲战略的，你和产品战略其实还很远，你当然不服气说，那开发不也就是按照需求开发代码吗，但是有时候有这么一个问题会问开发，这个你能做吗？如果回答是不能，可能暂时就不做了，但是如果问测试，这个你能测吗，如果回答是不能，产品一样做，一样发布;
没有作品，那么在公司产品战略里面一定是低的，公司制定产品战略规划，测试其实是没有任何话语权的。没有战略位置，那么测试地位是一定是不高的，所以影响力相对一定低的，那么薪资一定会相对低的，所以成就感自然会少点&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-3-被人认可的机会少:75f37de82acf08172666c46773f32200&#34;&gt;1.3. 被人认可的机会少&lt;/h4&gt;

&lt;p&gt;和开发比较起来，花费同样的精力，测试得到的认可会少点；测试一般是不出事的时候没人知道，出事了才知道；所以得到负面的露脸机会要来的多一点，自然认可的机会就少一点。在大公司里面如果需要outstanding，你需要有额外的看得见的东西，但是测试发现bug不是就是你工作的正常范围吗？&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;1-4-被放大了的责任范围-造成测试人能力不足问题被放大:75f37de82acf08172666c46773f32200&#34;&gt;1.4. 被放大了的责任范围，造成测试人能力不足问题被放大&lt;/h4&gt;

&lt;p&gt;测试的负面消息为什么会机会大呢？一个产品出现问题，第一个想到的就是测试，即使没有关系但是根本无法脱身，哪怕是需求不对，还是会有人问为什么测试没有质疑；哪怕开发修改了一些代码，但是在讨论范围的时候从来没有提起过，出问题时测试还是认为是第一责任人；测试的责任范围被扩的很大，大到大体上超过了很多测试人的能力范围了。&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;2-技术积累不够:75f37de82acf08172666c46773f32200&#34;&gt;2. 技术积累不够&lt;/h3&gt;

&lt;h4 id=&#34;2-1-大部分情况下测试训练的不是熟练技术-而是熟练业务:75f37de82acf08172666c46773f32200&#34;&gt;2.1.大部分情况下测试训练的不是熟练技术，而是熟练业务&lt;/h4&gt;

&lt;p&gt;日常工作当中，大部分测试熟悉的还是业务，而不是技术实现的细节；但是当你换了工作你以前熟悉的业务也就不能算你这家公司的积累了&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;2-2-锻炼技术的机会少:75f37de82acf08172666c46773f32200&#34;&gt;2.2. 锻炼技术的机会少&lt;/h4&gt;

&lt;p&gt;大部分测试其实很难有机会写工业级的代码，即使你写自动化测试，其实很多什么更多的堆代码；很少做过好好的设计，或者使用一些设计模式；也很少会用算法；同样更加不太可能深入了解那些开源框架的原理；测试一直都是忙于解决那些重要而且紧急的事情，却很少有时间处理那些重要但不紧急的事情，这个一个硬伤。&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&#34;2-3-开发有design-pattern-测试有-testing-pattern吗:75f37de82acf08172666c46773f32200&#34;&gt;2.3. 开发有design pattern，测试有 Testing Pattern吗？&lt;/h4&gt;

&lt;h4 id=&#34;2-4-测试接触面比较广-似乎全部有点懂-但是又不太懂-真要解决难题时-测试可能有用的只有理念了-理念是什么呢-那就是流程-哈哈-自嘲一个-可是什么样的流程呢-流程每一步解决什么问题-测试人都清楚吗-技术积累需要专的-至少有一到两个点是专的-否则谈什么积累:75f37de82acf08172666c46773f32200&#34;&gt;2.4. 测试接触面比较广，似乎全部有点懂，但是又不太懂，真要解决难题时，测试可能有用的只有理念了，理念是什么呢，那就是流程，哈哈，自嘲一个，可是什么样的流程呢，流程每一步解决什么问题，测试人都清楚吗？技术积累需要专的，至少有一到两个点是专的，否则谈什么积累&lt;/h4&gt;

&lt;p&gt;反思为什么技术积累不够的时候，我更加相信测试的责任范围被放大了，为何？一个天天挣扎在对公司重要而且紧急的任务上面，同时认为决定了公司产品质量的职位，居然可能是研发部门平均薪资水平最低的职位，似乎这个结论是不是完全不make sense? 如果领导一直认为质量问题是测试的话，我觉的如果这样反过来想想的话，可能觉得问题不一定是测试了。&lt;/p&gt;

&lt;h3 id=&#34;3-机会不多-转型困难:75f37de82acf08172666c46773f32200&#34;&gt;3. 机会不多，转型困难&lt;/h3&gt;

&lt;p&gt;其实以上两点分析，自然会造成第三点，积累不够，经常有负面新闻的人，自然机会不多；没有一个突出特点的人，转型自然也困难，往哪里转呢？似乎都可以做做，似乎又都不能做&amp;hellip;&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;改进和实施:75f37de82acf08172666c46773f32200&#34;&gt;改进和实施&lt;/h2&gt;

&lt;p&gt;以上分析了造成测试不愉快的几个原因，以下就想想如何解决这些，未必能解决什么但是想还是要想的：&lt;/p&gt;

&lt;h3 id=&#34;1-积累自己的产品:75f37de82acf08172666c46773f32200&#34;&gt;1. 积累自己的产品&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;测试需要有自己的通用代码库，自己的作品，软件业的我相信还是匠人的世界，所以有作品和没有作品就表示你是匠人还不是，所以我自己一定要想想写点通用的测试代码；我常常想到像工厂流水线制造产品的时候，其实他们面对的问题和测试遇到的问题是一样的，工厂可以购买通用机器设备来加快生产效率，同时也有自己构建工具来做，那么测试也可以去构建自己的工具来加快交付，整个交付其实就像工厂在大规模生产。 构建测试的工具产品去加快交付！&lt;/li&gt;
&lt;li&gt;提高自身在交付中的地位，通过自动化测试，持续集成的实施，去加快交付；&lt;/li&gt;
&lt;li&gt;需要提炼Testing Pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-更深入的学习:75f37de82acf08172666c46773f32200&#34;&gt;2. 更深入的学习&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;深入学习1-2门语言，以及一个数据库&lt;/li&gt;
&lt;li&gt;熟练使用Linux，常用服务器如Apache，tomcat，jboss&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-更多的将测试的观点表达:75f37de82acf08172666c46773f32200&#34;&gt;3. 更多的将测试的观点表达&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;不停的讲，质量光靠测试是不够的，需要团队的合作；不停的提醒团队，产品是给客户的，不是个测试测的；要站在更高的层面看产品，而不是通过测试就表示任务完成了&lt;/li&gt;
&lt;li&gt;不停的去想如何改进团队效率，如何让需求设计到测试用例的设计，执行更有效率；我相信这里有很多事情可以做，如果去更好效率的做端到端的交付，一定需要更好的产品，而不是什么quality center，rational 。。。。。。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>